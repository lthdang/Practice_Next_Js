generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int    @id @default(autoincrement())
  role_name String @unique @db.VarChar(50)
  users     User[]
}

model User {
  user_id         Int                  @id @default(autoincrement())
  username        String               @unique @db.VarChar(100)
  email           String               @unique @db.VarChar(255)
  password_hash   String               @db.VarChar(255)
  full_name       String?              @db.VarChar(255)
  avatar_url      String?              @db.VarChar(255)
  role_id         Int
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  deleted_at      DateTime?
  comments        Comment[]
  created_courses Course[]             @relation("CreatedCourses")
  enrollments     Enrollment[]
  created_lessons Lesson[]             @relation("CreatedLessons")
  role            Role                 @relation(fields: [role_id], references: [role_id])
  progress        UserLessonProgress[]
}

model Course {
  course_id     Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  language      String       @db.VarChar(50)
  price         Decimal      @db.Decimal(10,2)
  description   String?      @db.VarChar(1000)
  thumbnail_url String?      @db.VarChar(255)
  created_by_id Int
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  deleted_at    DateTime?
  created_by    User         @relation("CreatedCourses", fields: [created_by_id], references: [user_id])
  enrollments   Enrollment[]
  lessons       Lesson[]
}

model Lesson {
  lesson_id     Int                  @id @default(autoincrement())
  course_id     Int
  title         String               @db.VarChar(255)
  content       String?
  video_url     String?              @db.VarChar(255)
  order_index   Int                  @default(0)
  created_by_id Int
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  deleted_at    DateTime?
  comments      Comment[]
  course        Course               @relation(fields: [course_id], references: [course_id])
  created_by    User                 @relation("CreatedLessons", fields: [created_by_id], references: [user_id])
  quizzes       Quiz[]
  progress      UserLessonProgress[]
}

model UserLessonProgress {
  progress_id  Int       @id @default(autoincrement())
  user_id      Int
  lesson_id    Int
  is_completed Boolean   @default(false)
  completed_at DateTime?
  lesson       Lesson    @relation(fields: [lesson_id], references: [lesson_id])
  user         User      @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, lesson_id])
}

model Quiz {
  quiz_id   Int        @id @default(autoincrement())
  lesson_id Int
  title     String     @db.VarChar(255)
  questions Question[]
  lesson    Lesson     @relation(fields: [lesson_id], references: [lesson_id])
}

model Question {
  question_id   Int      @id @default(autoincrement())
  quiz_id       Int
  question_text String
  question_type String   @db.VarChar(50)
  answers       Answer[]
  quiz          Quiz     @relation(fields: [quiz_id], references: [quiz_id])
}

model Answer {
  answer_id   Int      @id @default(autoincrement())
  question_id Int
  answer_text String
  is_correct  Boolean  @default(false)
  question    Question @relation(fields: [question_id], references: [question_id])
}

model Enrollment {
  enrollment_id   Int      @id @default(autoincrement())
  user_id         Int
  course_id       Int
  enrollment_date DateTime @default(now())
  course          Course   @relation(fields: [course_id], references: [course_id])
  user            User     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, course_id])
}

model Comment {
  comment_id        Int       @id @default(autoincrement())
  lesson_id         Int
  user_id           Int
  parent_comment_id Int?
  content           String
  created_at        DateTime  @default(now())
  lesson            Lesson    @relation(fields: [lesson_id], references: [lesson_id])
  parent_comment    Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [comment_id], onDelete: NoAction, onUpdate: NoAction)
  replies           Comment[] @relation("CommentReplies")
  user              User      @relation(fields: [user_id], references: [user_id])
}
